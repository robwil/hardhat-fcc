import { BigNumber, ethers } from "ethers";
import fs from "fs";
import * as dotenv from "dotenv";
dotenv.config({ path: __dirname + "/.env" });

async function main() {
  const rpcUrl = process.env.RPC_URL;
  if (!rpcUrl) {
    throw new Error("Must specify RPC_URL via environment file");
  }
  const provider = new ethers.providers.JsonRpcProvider(rpcUrl);

  const passwordForDecryption = process.env.PRIVATE_KEY_PASSWORD;
  if (!passwordForDecryption) {
    throw new Error("Must specify PRIVATE_KEY_PASSWORD via environment file");
  }
  const encryptedJsonKey = fs.readFileSync("./encryptedKey.json", "utf-8");
  let wallet = ethers.Wallet.fromEncryptedJsonSync(
    encryptedJsonKey,
    passwordForDecryption
  );
  wallet = await wallet.connect(provider);

  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying contract...");
  const contract = await contractFactory.deploy();
  console.log({ contract });
  // wait for 1 confirmation
  const deploymentReceipt = await contract.deployTransaction.wait(1);
  console.log({ deploymentReceipt });

  /*
    // Alternatively, we can deploy manually using raw transaction data
    const tx = {
        nonce: await wallet.getTransactionCount(),
        gasPrice: 20000000000,
        gasLimit: 1000000,
        to: undefined,
        value: 0,
        data: '0x608060405234801561001057600080fd5b50610970806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec114610067578063471f7cdf146100855780636057361d146100a35780636f760f41146100bf5780638bab8dd5146100db5780639e7a13ad1461010b575b600080fd5b61006f61013c565b60405161007c91906102e7565b60405180910390f35b61008d610145565b60405161009a91906102e7565b60405180910390f35b6100bd60048036038101906100b89190610342565b61014b565b005b6100d960048036038101906100d491906104b5565b610155565b005b6100f560048036038101906100f09190610511565b6101e4565b60405161010291906102e7565b60405180910390f35b61012560048036038101906101209190610342565b610212565b6040516101339291906105d9565b60405180910390f35b60008054905090565b60005481565b8060008190555050565b6000604051806040016040528083815260200184815250905060018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190816101b99190610815565b505050816002846040516101cd9190610923565b908152602001604051809103902081905550505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061022257600080fd5b906000526020600020906002020160009150905080600001549080600101805461024b90610638565b80601f016020809104026020016040519081016040528092919081815260200182805461027790610638565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b5050505050905082565b6000819050919050565b6102e1816102ce565b82525050565b60006020820190506102fc60008301846102d8565b92915050565b6000604051905090565b600080fd5b600080fd5b61031f816102ce565b811461032a57600080fd5b50565b60008135905061033c81610316565b92915050565b6000602082840312156103585761035761030c565b5b60006103668482850161032d565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103c282610379565b810181811067ffffffffffffffff821117156103e1576103e061038a565b5b80604052505050565b60006103f4610302565b905061040082826103b9565b919050565b600067ffffffffffffffff8211156104205761041f61038a565b5b61042982610379565b9050602081019050919050565b82818337600083830152505050565b600061045861045384610405565b6103ea565b90508281526020810184848401111561047457610473610374565b5b61047f848285610436565b509392505050565b600082601f83011261049c5761049b61036f565b5b81356104ac848260208601610445565b91505092915050565b600080604083850312156104cc576104cb61030c565b5b600083013567ffffffffffffffff8111156104ea576104e9610311565b5b6104f685828601610487565b92505060206105078582860161032d565b9150509250929050565b6000602082840312156105275761052661030c565b5b600082013567ffffffffffffffff81111561054557610544610311565b5b61055184828501610487565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610594578082015181840152602081019050610579565b60008484015250505050565b60006105ab8261055a565b6105b58185610565565b93506105c5818560208601610576565b6105ce81610379565b840191505092915050565b60006040820190506105ee60008301856102d8565b818103602083015261060081846105a0565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061065057607f821691505b60208210810361066357610662610609565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261068e565b6106d5868361068e565b95508019841693508086168417925050509392505050565b6000819050919050565b600061071261070d610708846102ce565b6106ed565b6102ce565b9050919050565b6000819050919050565b61072c836106f7565b61074061073882610719565b84845461069b565b825550505050565b600090565b610755610748565b610760818484610723565b505050565b5b818110156107845761077960008261074d565b600181019050610766565b5050565b601f8211156107c95761079a81610669565b6107a38461067e565b810160208510156107b2578190505b6107c66107be8561067e565b830182610765565b50505b505050565b600082821c905092915050565b60006107ec600019846008026107ce565b1980831691505092915050565b600061080583836107db565b9150826002028217905092915050565b61081e8261055a565b67ffffffffffffffff8111156108375761083661038a565b5b6108418254610638565b61084c828285610788565b600060209050601f83116001811461087f576000841561086d578287015190505b61087785826107f9565b8655506108df565b601f19841661088d86610669565b60005b828110156108b557848901518255600182019150602085019450602081019050610890565b868310156108d257848901516108ce601f8916826107db565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006108fd8261055a565b61090781856108e7565b9350610917818560208601610576565b80840191505092915050565b600061092f82846108f2565b91508190509291505056fea26469706673582212203815c2bd3452d7417dd3eda6dee7555912ee08fd003847478b9db202f450861d64736f6c63430008110033',
        chainId: 1337,
    };
    const sentTransaction = await wallet.sendTransaction(tx);
    const transactionReceipt = await sentTransaction.wait(1);
    console.log({transactionReceipt});
    */

  const currentFavoriteNumber: BigNumber = await contract.retrieve();
  console.log(`Current favorite number: ${currentFavoriteNumber.toString()}`);
  const txResponse = await contract.store("7");
  await txResponse.wait(1);
  const updatedFavoreitNumber: BigNumber = await contract.retrieve();
  console.log(`Updated favorite number: ${updatedFavoreitNumber.toString()}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
